/**
 * All generated by GPT-4
 */

interface TreeNode {
  name: string;
  type: "file" | "directory";
}

interface FileNode extends TreeNode {
  type: "file";
  size: number;
  mimeType: string;
}

interface DirectoryNode extends TreeNode {
  type: "directory";
  children: TreeNode[];
}

export async function getDirectoryTree(
  directoryHandle: FileSystemDirectoryHandle
): Promise<DirectoryNode> {
  const tree: DirectoryNode = {
    name: directoryHandle.name,
    type: "directory",
    children: [],
  };

  for await (const entryHandle of directoryHandle.values()) {
    if (entryHandle.kind === "file") {
      const file = await entryHandle.getFile();
      const fileNode: FileNode = {
        name: file.name,
        type: "file",
        size: file.size,
        mimeType: file.type,
      };
      tree.children.push(fileNode);
    } else if (entryHandle.kind === "directory") {
      const subtree = await getDirectoryTree(entryHandle);
      tree.children.push(subtree);
    }
  }

  return tree;
}

export function generateAsciiTree(
  treeNode: TreeNode,
  level: number = 0,
  prefix: string = "",
  nextLevelPrefix: string = ""
): string {
  let output = prefix + treeNode.name + "\n";

  if (treeNode.type === "directory") {
    const directoryNode = treeNode as DirectoryNode;
    const childrenCount = directoryNode.children.length;

    directoryNode.children.forEach((childNode, index) => {
      const isLastChild = index === childrenCount - 1;
      const childPrefix = prefix + (isLastChild ? "└── " : "├── ");
      const updatedNextLevelPrefix =
        nextLevelPrefix + (isLastChild ? "    " : "│   ");

      output += generateAsciiTree(
        childNode,
        level + 1,
        childPrefix,
        updatedNextLevelPrefix
      );
    });
  }

  return output;
}

export function asciiTreeToHtml(asciiTree: string): string {
  // Replace ASCII characters with HTML elements
  const htmlTree = asciiTree
    .replace(/─/g, '<span class="ascii-horizontal">─</span>')
    .replace(/│/g, '<span class="ascii-vertical">│</span>')
    .replace(/├/g, '<span class="ascii-branch">├</span>')
    .replace(/└/g, '<span class="ascii-last-branch">└</span>');

  // Wrap the tree in a container element with line breaks
  const wrappedHtmlTree =
    '<pre class="ascii-tree-container">' + htmlTree + "</pre>";

  return wrappedHtmlTree;
}
